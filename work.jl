#### workfile

using Random

mutable struct StatesVec{T<:Signed}
    states::Vector{T}
end

function StatesVec(len::Integer, vals::NTuple{3, T} = (Int8(-1), Int8(0), Int8(1))) where T
    StatesVec(rand(vals, len))
end

function learn!(entity1::StatesVec{T}, entity2::StatesVec{T}, p₁::Real) where T
    idx = (entity2.states .!= T(0)) .& (rand(length(entity1.states)) .<= p₁)
    view(entity1.states, idx) .= view(entity2.states, idx)
end

function measure_compatibility(entity1::StatesVec{T}, entity2::StatesVec{T}) where T
    sum(entity1.states .== entity2.states)
end

function adjust!(organizational_code::StatesVec{T}, agents::Vector{StatesVec{T}}, p₂) where T
    
end