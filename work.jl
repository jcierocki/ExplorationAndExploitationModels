#### workfile

using Random

mutable struct StatesVec{T<:Signed}
    states::Vector{T}
end

function StatesVec(len::Integer, vals::NTuple{3,T} = (Int8(-1), Int8(0), Int8(1))) where T
    StatesVec(rand(vals, len))
end

function learn!(entity1::StatesVec{T}, entity2::StatesVec{T}, p₁::Real)::SubArray{T} where T
    idx = (entity2.states .!= T(0)) .& (rand(length(entity1.states)) .<= p₁)
    view(entity1.states, idx) .= view(entity2.states, idx)
end

function measure_compatibility(entity1::StatesVec{T}, entity2::StatesVec{T})::Integer where T
    sum(entity1.states .== entity2.states)
end

function count_views(dim::Integer, agents::AbstractVector{StatesVec{T}}, vals::NTuple{3,T} = (Int8(-1), Int8(0), Int8(1))) where T
    map(v->count(a->a.states[dim]==v, agents), collect(vals))
end

function calc_change_probability(dim::Integer, organizational_code::StatesVec{T}, agents::AbstractVector{StatesVec{T}}, p₂::Real, vals::NTuple{3,T} = (Int8(-1), Int8(0), Int8(1))) where T
    counted_views = count_views(dim, agents, vals)

    most_pop_val = vals[argmax(counted_views)]
    if vals[argmax(counted_views)] == organizational_code.states[dim]
        return 0
    end

    idx = organizational_code.states[dim] .== collect(vals)
    (most_pop_val, 1 - (1 - p₂)^(sum(counted_views[.!idx]) - sum(counted_views[idx])))
end

function adjust!(organizational_code::StatesVec{T}, reality::StatesVec{T}, agents::AbstractVector{StatesVec{T}}, p₂::Real) where T
    comp_code = measure_compatibility(reality, organizational_code)
    better_comp_agents = view(agents, map(a->measure_compatibility(a, reality), agents) .> comp_code)

    println("11")
    for i in eachindex(organizational_code.states)
        println("loop start")
        most_pop_val, prob = calc_change_probability(i, organizational_code, agents, p₂)
        if rand() <=  prob
           @inbounds organizational_code.states[i] = most_pop_val
        end
        println("loop end")
    end
end

t_agents = [StatesVec(10) for i in 1:20]
t_code = StatesVec(fill(Int8(0), 10))
t_real = StatesVec(10, (Int8(-1), Int8(1)))

calc_change_probability(1, t_code, t_agents, 0.5)
tt = count_views(1, t_agents)

adjust!(t_code, t_real, t_agents, 0.5)